# -*- coding: utf-8; mode: _tcl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- vim:fenc=utf-8:ft=tcl:et:sw=2:ts=2:sts=2

PortSystem              1.0

name                    gpsd

license                 BSD
categories              net
maintainers             {michaelld @michaelld} \
                        {fwright.net:fw @fhgwright} openmaintainer
platforms               darwin

description             GPS service daemon

long_description        GPSD is a service daemon that handles GPSes and other \
                        navigation-related sensors reporting over USB, serial, \
                        TCP/IP, or UDP connections and presents reports in \
                        a well-documented JSON format.  The package also \
                        includes a number of clients which can be run against \
                        a local GPSD or a GPSD on another machine.

homepage                http://www.catb.org/${name}/

subport gpsd-devel {}

if {${subport} eq ${name}} {

    # release
    conflicts           gpsd-devel

<<<<<<< HEAD
    version             3.17
    revision            2
    checksums           rmd160 7aeacd58b7374b392e691fc470dc9a644169ba8a \
sha256 68e0dbecfb5831997f8b3d6ba48aed812eb465d8c0089420ab68f9ce4d85e77a \
size   8755304
=======
    version             3.18.1
    checksums           rmd160  08f95b51218f11f7b07c1a5046cead366216fdc8 \
                        sha256  5cb1e6d880ec9a52c62492dd0e3d77451b7c7ad625895bd652f6354215aec23e \
                        size    9031595
>>>>>>> b1ae942d411bb90a22abe95da85a86219b6dbdb9

    master_sites        savannah

    # NOTE: The 3.18.1 tarball doesn't quite match the release-3.18.1 sources.
    # This due to a recurring problem clobbering the 'gps' symlinks in the
    # contrib/ and devtools/.  Since this doesn't affect the installed port,
    # these errors are left as is.  Note, however, that attempts to directly
    # use Python programs in these subdirectories from the work directory
    # may not work.

    patchfiles-append   patch-SConstruct.diff
<<<<<<< HEAD

    # GPSD requires Python 2.6, 2.7, or 3.2+, but for now we just base
    # it on 2.7.  The Python Portgroup breaks the C installs, so we
    # can't use it until the port is split up between the C/C++ and
    # Python code.

    depends_run             port:python37
    configure.python        ${prefix}/bin/python3.7

    post-destroot {
        reinplace "s|#!/usr/bin/env python|#!${configure.python}|" \
            ${destroot}${prefix}/bin/gegps
        reinplace "s|#!/usr/bin/env python|#!${configure.python}|" \
            ${destroot}${prefix}/bin/gpscat
        reinplace "s|#!/usr/bin/env python|#!${configure.python}|" \
            ${destroot}${prefix}/bin/gpsfake
        reinplace "s|#!/usr/bin/env python|#!${configure.python}|" \
            ${destroot}${prefix}/bin/gpsprof
        if {[variant_isset xgps]} {
            reinplace "s|#!/usr/bin/env python|#!${configure.python}|" \
                ${destroot}${prefix}/bin/xgps
            reinplace "s|#!/usr/bin/env python|#!${configure.python}|" \
                ${destroot}${prefix}/bin/xgpsspeed
        }
        system -W ${destroot}${prefix}/lib "install_name_tool -id ${prefix}/lib/libgps.dylib libgps.dylib"
    }
=======
    patchfiles-append   patch-noC99.diff
    patchfiles-append   patch-pyserial.diff
>>>>>>> b1ae942d411bb90a22abe95da85a86219b6dbdb9

    livecheck.type          regex
    livecheck.url           https://download.savannah.gnu.org/releases/gpsd/
    livecheck.regex         "${name}-(\\d+(?:\\.\\d+)*)${extract.suffix}"

} else {

    # devel
    conflicts           gpsd

<<<<<<< HEAD
    version             20180919
    set commit          bbc75abc4f34b5bca4c0842986dffbf952d0077a
    checksums           rmd160 aee030971a9fb559f5285a61fab536ac906fdc3a \
sha256 e603aefd549f2a93576f1fbc39491073c32052955258eb180d9505654c7ece3a \
size   9770512
=======
    version             20181126
    set commit          513cab610322755a45143eac42eb53ceb08fca2d
    checksums           rmd160  1b699eb333df171217c4c499468a6eff576e3ea6 \
                        sha256  875c3283e6f4cc1061052d7bfdef891af566ac79af3b32de8b88330fc8d1921f \
                        size    10067065
>>>>>>> b1ae942d411bb90a22abe95da85a86219b6dbdb9

    master_sites        http://git.savannah.gnu.org/cgit/gpsd.git/snapshot
    distname            ${name}-${commit}

    # This upstream version is completely patch-free

    livecheck.type          regex
    livecheck.version       ${commit}
    livecheck.url           http://git.savannah.gnu.org/cgit/gpsd.git
    livecheck.regex         "id=(\[0-9a-f\]*)'>HEAD"
}

# GPSD requires Python 2.6, 2.7, or 3.2+; don't use 2.6, 3.2, or
# 3.3, since we're weaning MP off of them.

set pythons_suffixes {27 34 35 36 37}

set pythons_ports {}
foreach s ${pythons_suffixes} {
    lappend pythons_ports python${s}
}

<<<<<<< HEAD
    # default to +python37
    set selected_python_ver_no_dot "27"
    foreach s ${pythons_suffixes} {
        if {[variant_isset python${s}]} {
            set selected_python_ver_no_dot ${s}
        }
    }
    default_variants +python${selected_python_ver_no_dot}

    # make sure -python37 isn't specified alone
    set selected_python_ver_no_dot ""
    foreach s ${pythons_suffixes} {
        if {[variant_isset python${s}]} {
            set selected_python_ver_no_dot ${s}
        }
    }
    if {${selected_python_ver_no_dot} eq ""} {
        ui_error "\n\nYou must select one of the Python variants: +python37, +python34, +python35, +python36, or +python37.\n"
    return -code error "Invalid Python variant selection"
    }
=======
foreach s ${pythons_suffixes} {
    set p python${s}
    set v [string index ${s} 0].[string index ${s} 1]
    set i [lsearch -exact ${pythons_ports} ${p}]
    set c [lreplace ${pythons_ports} ${i} ${i}]
    variant ${p} description "Build ${name} to use Python ${v}" conflicts {*}${c} ""
}
>>>>>>> b1ae942d411bb90a22abe95da85a86219b6dbdb9

# default to +python27
set pyver_no_dot "27"
foreach s ${pythons_suffixes} {
    if {[variant_isset python${s}]} {
        set pyver_no_dot ${s}
    }
}
default_variants +python${pyver_no_dot}

# make sure -python27 isn't specified alone
set pyver_no_dot ""
foreach s ${pythons_suffixes} {
    if {[variant_isset python${s}]} {
        set pyver_no_dot ${s}
    }
}
if {${pyver_no_dot} eq ""} {
    ui_error "\n\nYou must select one of the Python variants (+pythonXY).\n"
return -code error "Invalid Python variant selection"
}

set pyver_dotted [join [split ${pyver_no_dot} ""] .]

# NOTE:  All Python dependencies which are conceptually depends_run actually
# need to be depends_lib, since the build procedure references them, usually
# just to verify theire existence.

depends_lib-append      port:python${pyver_no_dot} \
                        port:py${pyver_no_dot}-serial

configure.python        ${prefix}/bin/python${pyver_dotted}

depends_lib-append      port:ncurses
depends_build-append    port:scons port:pkgconfig

use_configure           no

set cxx_stdlibflags {}
if {[string match *clang* ${configure.cxx}]} {
    set cxx_stdlibflags -stdlib=${configure.cxx_stdlib}
}

build.cmd               ${prefix}/bin/scons
build.target
build.args              prefix=${prefix} \
                        target_python=${configure.python} \
                        qt=no \
                        usb=no \
                        strip=no \
                        dbus_export=no \
                        xgps=no
build.env-append        CC="${configure.cc} [get_canonical_archflags cc]" \
                        CFLAGS="${configure.cflags}" \
                        CXX="${configure.cxx} [get_canonical_archflags cxx] ${cxx_stdlibflags}" \
                        CXXFLAGS="${configure.cxxflags}" \
                        LDFLAGS="${configure.ldflags}"

# Allow the regression tests to be run via "port test gpsd".
#
# The speed of the daemon tests is highly dependent on the WRITE_PAD value.
# Empirically, 200us seems to be adequate on a MacPro, and 500us seems to be
# adequate on a PowerBook G4, but even 2ms is sometimes inadequate under 10.12,
# so we use 5ms here.  If needed, this value can be overridden with
# WRITE_PAD=XXX on the command line, but only if WRITE_PAD is included in
# extra_env in macports.conf.  In all cases, the WRITE_PAD value in use is
# reported by the test framework and is visible with -v.
#
# The test phase duplicates the arguments and environment (except WRITE_PAD)
# from the build phase, mainly to avoid gratuitous rebuilds between the phases.
#
# The GPSD build procedure supports parallel tests, but there's no built-in
# MacPorts support for parallel tests, nor is there a test.jobs variable, so
# we just augment test.cmd with build.jobs.
#
test.run                yes
test.cmd                ${build.cmd} -j${build.jobs}
test.target             testregress
test.args               {*}${build.args}
test.env-append         {*}${build.env}
if { [info exists ::env(WRITE_PAD)] } {
    test.env-append     WRITE_PAD=$::env(WRITE_PAD)
} else {
    test.env-append     WRITE_PAD=0.005
}

destroot.args           {*}${build.args}
destroot.env-append     {*}${destroot.destdir} {*}${build.env}

post-destroot {
    # Rewrite shebang lines of Python programs
    set python_progs {gegps gpscat gpsfake gpsprof ubxtool zerk}
    if {[variant_isset xgps]} {
        lappend python_progs xgps xgpsspeed
    }
    foreach pp ${python_progs} {
        reinplace "s|#!/usr/bin/env python|#!${configure.python}|" \
            ${destroot}${prefix}/bin/${pp}
    }

    system -W ${destroot}${prefix}/lib "install_name_tool -id \
        ${prefix}/lib/libgps.dylib libgps.dylib"
}

# Although GPSD has successfully been built with Qt5 at one time, that build
# is currently broken.  Until the build issue is sorted out, Qt support is
# limited to Qt4.
#
variant qt description {Build Qt4 bindings} {
    PortGroup               qt4 1.0

    # The following three lines are a workaround for #50347
    build.env-append        PKG_CONFIG_PATH=${qt_pkg_config_dir}
    test.env-append         PKG_CONFIG_PATH=${qt_pkg_config_dir}
    destroot.env-append     PKG_CONFIG_PATH=${qt_pkg_config_dir}

    build.args-replace      qt=no           qt=yes
    test.args-replace       qt=no           qt=yes
    destroot.args-replace   qt=no           qt=yes
}

variant libusb \
description {Include support for better USB device discovery} {
    depends_lib-append      port:libusb

    build.args-replace      usb=no          usb=yes
    test.args-replace       usb=no          usb=yes
    destroot.args-replace   usb=no          usb=yes
}

variant dbus description {Include support for DBUS} {
    depends_lib-append      port:dbus-glib

    build.args-replace      dbus_export=no  dbus_export=yes
    test.args-replace       dbus_export=no  dbus_export=yes
    destroot.args-replace   dbus_export=no  dbus_export=yes
}

variant xgps \
description {Include xgps/xgpsspeed X11 clients (dependency-intensive)} {
<<<<<<< HEAD
    depends_run-append      port:py37-cairo port:py37-gobject3 port:gtk3
    build.args-delete       xgps=no
    build.args-append       xgps=yes
    test.args-delete        xgps=no
    test.args-append        xgps=yes
    destroot.args-delete    xgps=no
    destroot.args-append    xgps=yes
=======
    depends_lib-append      port:py${pyver_no_dot}-cairo \
                            port:py${pyver_no_dot}-gobject3 \
                            port:gtk3

    build.args-replace      xgps=no         xgps=yes
    test.args-replace       xgps=no         xgps=yes
    destroot.args-replace   xgps=no         xgps=yes
>>>>>>> b1ae942d411bb90a22abe95da85a86219b6dbdb9
}

if {![variant_isset xgps]} {
    notes "The xgps variant is now needed to get the xgps and xgpsspeed programs."
}
