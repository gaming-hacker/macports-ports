# -*- coding: utf-8; mode: _tcl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- vim:fenc=utf-8:filetype=tcl:et:sw=2:ts=2:sts=2

PortSystem      1.0
PortGroup       compiler_blacklist_versions 1.0
PortGroup       mpi 1.0
PortGroup       cxx11 1.1
PortGroup       active_variants 1.1

name            boost

version         1.70.0
# Revision is set below in the `if {$subport eq $name} { ... }` statement
# The boost-numpy subport has its own revision number
checksums       rmd160 83440e32058f68390b979b88b116daa971f19c86 \
                sha256 430ae8354789de4fd19ee52f3b1f739e1fba576f0aded0897c3c2bc00fb38778 \
                size   97887058

license         Boost-1
categories      devel
platforms       darwin
maintainers     {ryandesign @ryandesign} {michaelld @michaelld} openmaintainer

description     Collection of portable C++ source libraries

long_description \
    Boost provides free portable peer-reviewed C++ \
    libraries. The emphasis is on portable libraries \
    which work well with the C++ Standard Library.

homepage        http://www.boost.org
master_sites    https://dl.bintray.com/boostorg/release/${version}/source/
set distver     [join [split ${version} .] _]
distname        ${name}_${distver}
use_bzip2       yes

depends_lib     port:zlib \
                port:expat \
                port:bzip2 \
                port:libiconv \
                port:icu

post-extract {
    fs-traverse dir ${workpath} {
        if [file isdirectory ${dir}] {
            file attributes ${dir} -permissions a+rx
        }
    }
}

patchfiles      patch-tools-build-src-engine-build.sh.diff \
                patch-tools-build-src-engine-build.jam.diff \
                patch-apple-clang-no-libcxx.diff
                # patch-apple-clang-no-libcxx.diff fixes a clang configuration
                # error that occurs on OS X 10.7 and 10.8 due to the assumption
                # that if clang is the compiler in use it must be using libc++.
                # Apple Clang uses libstdc++ by default on these OS versions.
                # The patch adds an additional BOOST_* configuration flag
                # that is set if Apple clang is being used but libc++
                # is not.  This flag is then used to prevent boost or a
                # dependent package from using functions such as std::forward that
                # are only available in libc++.  Fixes build of libcdr on these
                # OS versions without affecting build on 10.6 and less (where clang is not
                # the default compiler) or 10.9 and up (where libc++ is the default).

# temporary patch to fix: explicit template instanciations in
# boost::serialization don't get exported with all compilers; this fix
# is already in the boost repo & will be part of a future release. See
# also the following tickets:
# https://trac.macports.org/ticket/48717
# https://svn.boost.org/trac/boost/ticket/11671

patchfiles-append patch-export_serialization_explicit_template_instantiations.diff

# revert the default tagged library name changes in 1.69.0 <
# libboost_<component>-<threading>-<arch>.dylib > back to 1.68.0
# format: libboost_<component>-<threading>.dylib; where <component> is
# the component name (e.g., system, thread), <threading> is either mt
# or st (multi or single), and <arch> is the build arch (x86, x64,
# p64, p32).
patchfiles-append patch-revert-lib-name-tagged.diff

post-patch {
    reinplace "s|%%CONFIGURE.CC%%|${configure.cc}|g" ${worksrcpath}/tools/build/src/engine/build.jam \
                                                     ${worksrcpath}/tools/build/src/engine/build.sh
}

proc write_jam s {
    global worksrcpath
    set config [open ${worksrcpath}/user-config.jam a]
    puts ${config} ${s}
    close ${config}
}

# clang++ produces broken boost libraries (https://trac.macports.org/ticket/31525)
# If Apple's clang is used on 32-bit systems, it seems to silently ignore the '-march=i386' flag.
# (https://trac.macports.org/ticket/38157)
compiler.blacklist {clang < 421} *llvm-gcc-4.2 *gcc-4.0 gcc-3.3

compilers.choose   cc cxx
mpi.setup          -gcc

# NOTE: although technically Boost does not require C++11 compliance
# for building, doing so allows for building on more OSs than without.
# Further: Building Boost using C++11 compliance does not seem to then
# require ports depending on Boost to also require C++11 compliance,
# and requiring it does make such building easier for those ports.
configure.cxxflags-append -std=gnu++11

# It turns out that ccache and distcc can produce boost libraries that, although they
# compile without warning, have all sorts of runtime errors especially with pointer corruption.
# Since most people will now use MacPorts' pre-compiled boost, this should not be a problem.
configure.ccache    no
configure.distcc    no

configure.cmd       ./bootstrap.sh
configure.args      --without-libraries=python \
                    --without-libraries=mpi \
                    --with-icu=${prefix}

if {${os.platform} eq "darwin" && ${os.major} <= 10} {
    configure.args-append   --without-libraries=context \
                            --without-libraries=coroutine
}

configure.universal_args

post-configure {

    reinplace -E "s|-install_name \"|&${prefix}/lib/|" \
        ${worksrcpath}/tools/build/src/tools/darwin.jam

    set compileflags ""
    if {[string length ${configure.sdkroot}] != 0} {
        set compileflags "<compileflags>\"-isysroot ${configure.sdkroot}\""
    }

    set cxx_stdlibflags {}
    if {[string match *clang* ${configure.cxx}]} {
        set cxx_stdlibflags -stdlib=${configure.cxx_stdlib}
    }

    # see https://trac.macports.org/ticket/55857
    # see https://svn.boost.org/trac10/ticket/13454
    write_jam "using darwin : : ${configure.cxx} : <cxxflags>\"${configure.cxxflags} [get_canonical_archflags cxx] ${cxx_stdlibflags}\" ${compileflags} <linkflags>\"${configure.ldflags} ${cxx_stdlibflags}\" : ;"

}

build.cmd       ${worksrcpath}/b2
build.target
build.args      -d2 \
                --layout=tagged \
                --debug-configuration \
                --user-config=user-config.jam \
                -sBZIP2_INCLUDE=${prefix}/include \
                -sBZIP2_LIBPATH=${prefix}/lib \
                -sEXPAT_INCLUDE=${prefix}/include \
                -sEXPAT_LIBPATH=${prefix}/lib \
                -sZLIB_INCLUDE=${prefix}/include \
                -sZLIB_LIBPATH=${prefix}/lib \
                -sICU_PATH=${prefix} \
                variant=release \
                threading=multi \
                link=shared \
                runtime-link=shared \
                -j${build.jobs} \
                --no-cmake-config

destroot.cmd            ${worksrcpath}/bjam
destroot.post_args

pre-destroot {
    destroot.args {*}${build.args} --prefix=${destroot}${prefix}
    system "find ${worksrcpath} -type f -name '*.gch' -exec rm {} \\;"
}

post-destroot {
    set docdir ${prefix}/share/doc/${name}
    xinstall -d ${destroot}${docdir}
    set l [expr [string length ${worksrcpath}] + 1]
    fs-traverse f [glob -directory ${worksrcpath} *] {
        set dest ${destroot}${docdir}/[string range ${f} ${l} end]
        if {[file isdirectory ${f}]} {
            if {[file tail ${f}] eq "example"} {
                copy ${f} ${dest}
                continue
            }
            xinstall -d ${dest}
        } elseif {[lsearch -exact {css htm html png svg} [string range [file extension ${f}] 1 end]] != -1} {
            xinstall -m 644 ${f} ${dest}
        }
    }
}

subport boost-numpy {
    revision 0
    description Boost.Numpy library
    long_description ${description}
    depends_lib port:boost
    depends_lib-append port:py37-numpy
}

if {$subport eq $name} {
    revision 0
    patchfiles-append patch-disable-numpy-extension.diff

    variant regex_match_extra description \
        "Enable access to extended capture information of submatches in Boost.Regex" {
        notes-append "
        You enabled the +regex_match_extra variant\; see the following page for an\
        exhaustive list of the consequences of this feature:

    http://www.boost.org/doc/libs/${distver}/libs/regex/doc/html/boost_regex/ref/sub_match.html
"

        post-patch {
            reinplace {/#define BOOST_REGEX_MATCH_EXTRA/s:^// ::} \
                ${worksrcpath}/boost/regex/user.hpp
        }
    }

    post-destroot {
        delete file {*}[glob ${destroot}${prefix}/include/boost/python/numpy*]
    }

    if {[mpi_variant_isset]} {

        # see https://trac.macports.org/ticket/49748
        # see http://www.openradar.me/25313838
        configure.ldflags-append -Lstage/lib

        # There is a conflict with debug support.
        # The issue has been reported to both the MacPorts team and the boost team, as per:
        # <http://trac.macports.org/ticket/23667> and <https://svn.boost.org/trac/boost/ticket/4461>
        if {[variant_isset debug]} {
            return -code error "+debug variant conflicts with mpi"
        }

        configure.args-delete   --without-libraries=mpi

        post-configure {
            write_jam "using mpi : ${mpi.cxx} : : ${mpi.exec} ;"
        }

        if {![catch python_dir]} {

            patchfiles-append patch-libs-mpi-build-Jamfile.v2.diff

            post-destroot {
                set site_packages [python_dir]
                xinstall -d ${destroot}${site_packages}/boost
                xinstall -m 644 ${worksrcpath}/libs/mpi/build/__init__.py \
                    ${destroot}${site_packages}/boost

                set l ${site_packages}/boost/mpi.so
                move ${destroot}${prefix}/lib/mpi.so ${destroot}${l}
                system "install_name_tool -id ${l} ${destroot}${l}"
            }

        }
    }

    livecheck.type  regex
    livecheck.url   http://www.boost.org/users/download/
    livecheck.regex Version (\\d+\\.\\d+\\.\\d+)</span>
} else {
    post-destroot {
        move {*}[glob ${destroot}${prefix}/lib/libboost_numpy*] ${destroot}${prefix}
        move {*}[glob ${destroot}${prefix}/include/boost/python/numpy*] ${destroot}${prefix}
        # if an mpi variant *and* a python variant is selected, then a binary
        # python module called mpi.so gets installed, so delete ${frameworks_dir}
        delete ${destroot}${prefix}${frameworks_dir} \
            ${destroot}${prefix}/include \
            ${destroot}${prefix}/lib \
            ${destroot}${prefix}/share
        file mkdir ${destroot}${prefix}/lib ${destroot}${prefix}/include/boost/python
        move {*}[glob ${destroot}${prefix}/libboost_numpy*] ${destroot}${prefix}/lib
        move {*}[glob ${destroot}${prefix}/numpy*] ${destroot}${prefix}/include/boost/python
    }

    livecheck.type  none
}


build.args-append   address-model=64

