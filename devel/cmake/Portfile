# -*- coding: utf-8; mode: _tcl; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- vim:fenc=utf-8:ft=tcl:et:sw=2:ts=2:sts=2

PortSystem          1.0
PortGroup           muniversal 1.0
PortGroup           xcodeversion 1.0

# devel requires C++11 as of 2017-08-21
# https://gitlab.kitware.com/cmake/cmake/commit/c1f3eb9f2d628b2911aa17f65012fab0befc4b87
# release requires C++11 as of 3.10.0
if {!((${os.platform} eq "darwin" && ${os.major} < 10) || ${build_arch} eq "ppc" || ${build_arch} eq "ppc64")} {
    depends_lib-append port:libcxx
    configure.cxx_stdlib libc++
}
PortGroup cxx11 1.1

name                cmake

categories          devel
license             BSD
installs_libs       no
maintainers         {michaelld @michaelld}
description         Cross-platform make
set base_long_description \
    "An extensible, open-source system that manages the build \
    process in an operating system and compiler independent manner. \
    Unlike many cross-platform systems, CMake is designed to be \
    used in conjunction with the native build environment."
homepage            https://cmake.org
platforms           darwin freebsd

dist_subdir         cmake

subport cmake-devel {}

set branch          3.15

if {${subport} eq ${name}} {

    # release

    version         ${branch}.2
    checksums       rmd160 7eb821f5e17de67c63a7cf7ae8a7dba336239949 \
sha256 539088cb29a68e6d6a8fba5c00951e5e5b1a92c68fa38a83e1ed2f355933f768 \
size   9269449
revision        0

    master_sites    ${homepage}/files/v${branch}/
    conflicts       cmake-devel

    long_description ${base_long_description} \
        The ${subport} release port is updated roughly every few months.

    # release-only patches
    patchfiles-append \
        patch-Modules-noArchCheck.release.diff \
        patch-CMakeFindFrameworks.cmake.release.diff \
        patch-Source_CMakeVersionCompute.cmake.release.diff \
        patch-Source_Modules_FindLibUV.cmake.release.diff \
        patch-fix_cxx14_17_checks.release.diff \
        patch-fix-system-prefix-path.release.diff

    livecheck.type  regex
    livecheck.regex ${name}-(\[0-9.\]+)${extract.suffix}
    livecheck.url   https://cmake.org/files/LatestRelease/

} else {

    # devel

    set commit 114c52fa5b890092e1409c232c97733a8c04d5bf
    version   20190807-[string range ${commit} 0 7]
    checksums rmd160 ea183fe009aaf29a69a451fb4e8d1f3be4899841 \
sha256 55032ade37947686c5a12b4b37d2307893896e84a78c9451d356fe789ccbf99a \
size   6991057
    revision  0

    use_bzip2       yes
    master_sites    https://gitlab.kitware.com/cmake/cmake/repository/archive${extract.suffix}?ref=${commit}&
    distname        ${name}-${commit}

    post-extract {
        move ${workpath}/${name}-${commit}-${commit} ${workpath}/${name}-${commit}
    }

    conflicts       cmake
    long_description ${base_long_description} \
        The ${subport} port is updated roughly every week.

    # devel-only patches
    patchfiles-append \
        patch-Modules-noArchCheck.devel.diff \
        patch-CMakeFindFrameworks.cmake.devel.diff \
        patch-Source_CMakeVersionCompute.cmake.devel.diff \
        patch-Source_CMakeLists.txt.devel.diff \
        patch-Source_Modules_FindLibUV.cmake.devel.diff

    livecheck.type  regex
    #livecheck.regex data-clipboard-text=\"(\[0-9a-g\]+)\"
    livecheck.version ${commit}
    livecheck.url   https://gitlab.kitware.com/cmake/cmake/tree/master

}

depends_lib-append  port:curl \
                    port:expat \
                    port:zlib \
                    port:bzip2 \
                    port:libarchive \
                    port:ncurses

# allow use of libuv or libuv-devel;
# system libuv is the default as of 20160830 (g320f5)
depends_lib-append  path:lib/pkgconfig/libuv.pc:libuv

configure.env-append \
                    CMAKE_PREFIX_PATH=${prefix} \
                    CMAKE_INCLUDE_PATH=${prefix}/include/ncurses \
                    CMAKE_LIBRARY_PATH=${prefix}/lib

# On Lion, Clang 3.3 produces bad stream reading code when using libc++.
# See https://trac.macports.org/ticket/44129
# Clang 3.4 works. But Clang 3.7 doesn't work.
if {${os.platform} eq "darwin" && ${os.major} == 11 && ${configure.cxx_stdlib} eq "libc++"} {
    compiler.whitelist macports-clang-3.4
}
# Clang 3.9 and later require cmake; avoid circular dependency.
compiler.blacklist-append macports-clang-3.9 macports-clang-4.0 macports-clang-5.0 macports-clang-6.0

platform darwin {
    configure.env-append \
                    CMAKE_OSX_DEPLOYMENT_TARGET="${macosx_deployment_target}"

    if {${configure.sdkroot} != ""} {
        configure.env-append CMAKE_OSX_SYSROOT="${configure.sdkroot}"
    } else {
        configure.env-append CMAKE_OSX_SYSROOT="/"
    }

}

# jsoncpp 1.0+ requires CMake for building; circular dependencies are
# not possible in MacPorts. In addition, jsoncpp uses C++, so it would
# not be possible for CMake, which uses libc++ on 10.6-10.8, to link
# with a MacPorts copy of jsoncpp, which would usually use libstdc++
# on those systems. Fortunately CMake comes bundled with its own
# internal copy of jsoncpp, so we use that.

configure.args-append --docdir=share/doc/cmake \
                    --parallel=${build.jobs} \
                    --init=${worksrcpath}/macports.cmake \
                    --system-libs \
                    --no-system-jsoncpp \
                    --no-system-librhash

configure.universal_args
configure.post_args

# CMake's configure script doesn't recognize `--host`.
array set merger_host {i386 {} x86_64 {} }

build.post_args VERBOSE=ON

post-patch {
    # copy cmake init file, ready to be patched below
    copy ${filespath}/macports.cmake ${worksrcpath}

    # patch PREFIX
    reinplace "s|__PREFIX__|${prefix}|g" ${worksrcpath}/macports.cmake
    reinplace "s|__PREFIX__|${prefix}|g" ${worksrcpath}/Modules/CMakeFindFrameworks.cmake

    # patch Python Version; doing this is OK even when +docs is not
    # used, because the PYTHON_EXECUTABLE is used only when building
    # docs -- so, when not building docs its setting makes no difference.

    set PYTHON_VERSION_WITH_DOT "3.7"
    reinplace "s|__PYTHON_VERSION_WITH_DOT__|${PYTHON_VERSION_WITH_DOT}|g" ${worksrcpath}/macports.cmake
}

post-destroot {
    xinstall -d -m 0755 ${destroot}${prefix}/share/emacs/site-lisp
    xinstall -m 0644 ${worksrcpath}/Auxiliary/cmake-mode.el \
        ${destroot}${prefix}/share/emacs/site-lisp
    foreach type {syntax indent} {
        xinstall -d -m 0755 ${destroot}${prefix}/share/vim/vimfiles/${type}
        xinstall -m 0644 -W ${worksrcpath}/Auxiliary/vim/${type} cmake.vim \
            ${destroot}${prefix}/share/vim/vimfiles/${type}
    }
    if ([variant_isset gui]) {
        set app CMake
        xinstall -d ${destroot}${applications_dir}/${app}.app/Contents/MacOS \
            ${destroot}${applications_dir}/${app}.app/Contents/Resources
        xinstall -m 644 ${filespath}/Info.plist.in ${destroot}${applications_dir}/${app}.app/Contents/Info.plist
        reinplace "s|@VERSION@|${version}|g" ${destroot}${applications_dir}/${app}.app/Contents/Info.plist
        reinplace "s|@PREFIX@|${prefix}|g" ${destroot}${applications_dir}/${app}.app/Contents/Info.plist
        ln -s ${prefix}/bin/cmake-gui ${destroot}${applications_dir}/${app}.app/Contents/MacOS/cmake-gui
        xinstall -m 644 ${worksrcpath}/Source/QtDialog/CMakeSetup.icns ${destroot}${applications_dir}/${app}.app/Contents/Resources/CMakeSetup.icns
    }
}

variant gui description {Build Qt-based cmake-gui} {
    configure.args-append --qt-gui
}


variant qt5 requires gui description {Build Qt GUI using Qt5} {
    PortGroup qt5 1.0
    if {${subport} eq ${name}} {
        patchfiles-append patch-qt5gui.release.diff
    } else {
        patchfiles-append patch-qt5gui.devel.diff
    }
    configure.args-append --qt-qmake=${qt_qmake_cmd}
}

if {[variant_isset gui]} {
        default_variants +qt5
} else {
    configure.args-append --no-qt-gui
}

variant docs description {Build documentation: HTML and manpages} {
    configure.args-append \
        --mandir=share/man \
        --sphinx-man \
        --sphinx-html
}


variant python37 requires docs \
    description {Build documentation using Sphinx from Python 3.7} {
    depends_build-append port:py37-sphinx
    configure.args-append \
        --sphinx-build=${prefix}/bin/sphinx-build-3.7
}

if {[variant_isset docs]} {
        default_variants +python37
}
