# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem                      1.0

# Please keep the minivmac and minivmac-devel ports as similar as possible.

set my_name                     minivmac
set my_suffix                   -devel
name                            ${my_name}${my_suffix}
set my_subport                  [regsub -- {-devel$} ${subport} {}]
conflicts                       [lsearch -all -inline -not -exact [list ${my_subport} ${my_subport}-devel] ${subport}]
epoch                           4
version                         36.00alpha-20180506
set branch                      [join [lrange [split ${version} .] 0 1] .]
set my_version                  [strsed ${version} {g/^.*-20//}]
categories                      emulators aqua
maintainers                     {ryandesign @ryandesign}
license                         GPL-2
homepage                        http://www.gryphel.com/c/minivmac/alpha.html
platforms                       macosx
dist_subdir                     ${my_name}

description                     an emulator of the Macintosh Plus and other \
                                early Macintosh models

long_description                Mini vMac emulates early Macintosh computers \
                                that use Motorola's 680x0 processors, sold by \
                                Apple from 1984 to 1996.

options my_variations
default my_variations {}

if {${subport} eq ${name}} {
    livecheck.type              regex
    livecheck.url               ${homepage}
#    livecheck.version           ${my_version}-${branch}
    livecheck.version           ${my_version}
    livecheck.regex             ${my_name}-?(\[0-9.-\]+)\\.src

    long_description-append     The best-tested variation emulates a Macintosh \
                                Plus, but it can also emulate a Macintosh \
                                128K, 512K, 512Ke, SE, SE FDHD, Classic, or \
                                Macintosh II.

    revision                    1
    supported_archs             noarch
    depends_run                 port:${my_name}-plus${my_suffix}
    distfiles
    use_configure               no
    build {}
    destroot {
        xinstall -d ${destroot}${prefix}/share/doc/${subport}
        system "echo ${subport} is a stub port > ${destroot}${prefix}/share/doc/${subport}/README"
    }

    notes "
        The ${subport} stub port is not meant to be installed. Instead,\
        install one (or more) of the available subports corresponding to the\
        Macintosh model(s) you wish to emulate. Use `port info --subports\
        ${subport}\' to see the list of available subports.
    "
} else {
    livecheck.type              none

    revision                    0
    supported_archs             i386 ppc
#    distname                    ${my_name}${my_version}-${branch}
    distname                    ${my_name}${my_version}
    use_zip                     yes

    master_sites                http://www.gryphel.com/d/minivmac/c/:minivmacsource \
                                sourceforge:project/minivmac/minivmac-extras/extras6:minivmacextras6 \
                                sourceforge:project/minivmac/minivmac-extras/extras11:minivmacextras11 \
                                http://www.ryandesign.com/macports/distfiles/minivmac:bootstrap \
                                http://download.info.apple.com/Apple_Support_Area/Apple_Software_Updates/English-North_American/Macintosh/System/Older_System/System_7.0.x/:apple

    set my_src                                  ${distname}.src
    set my_src_distfile                         ${my_src}.zip
    set my_bootstrap_distfile                   ${my_name}-bootstrap-3.2.3_0.zip
    set my_icons                                icnsosx-1.0.0
    set my_icons_distfile                       ${my_icons}.zip
    set my_autoquit                             autquit7-1.3.1
    set my_autoquit_distfile                    ${my_autoquit}.zip
    set my_system_disk_container                System_7.0.1.smi
    set my_system_disk_container_distfile       ${my_system_disk_container}.bin

    distfiles                   ${my_src_distfile}:minivmacsource \
                                ${my_bootstrap_distfile}:bootstrap \
                                ${my_icons_distfile}:minivmacextras6 \
                                ${my_autoquit_distfile}:minivmacextras11 \
                                ${my_system_disk_container_distfile}:apple

    extract.only                ${my_src_distfile} \
                                ${my_bootstrap_distfile} \
                                ${my_icons_distfile} \
                                ${my_autoquit_distfile}

    checksums                   ${my_src_distfile} \
                                rmd160  1b214640257d2df4e4448ff9f1fb479633542829 \
                                sha256  74d67aed4fbd5bdfb32d1b4d6417b588f736b56731150f214652a44b8757ea49 \
                                size    702294 \
                                ${my_bootstrap_distfile} \
                                rmd160  32e803a75d4f9ab6b7dfa5a7b1ec2ef9d3a057c2 \
                                sha256  e6fe692683ab54e08b0350fe9901e872f7bf3c3a62f69b45773254fce45a4fae \
                                size    85381 \
                                ${my_icons_distfile} \
                                rmd160  cef6d7d7578464538d0042b0d98379ae7f18fab7 \
                                sha256  968a0bad51903c9cd3b08476ec5a6572856dc44eedf9ff9b174eb9c59b7b7117 \
                                size    60373 \
                                ${my_autoquit_distfile} \
                                rmd160  949ce06752fbcfa9a92787497dace45e7299eb41 \
                                sha256  a9aad37cfd2d6dbd4db5e307b8598348ba25aa5504aac968b8d570d5927e576a \
                                size    52341 \
                                ${my_system_disk_container_distfile} \
                                rmd160  89fc3780c9c5d575a8da4068dc810c1f56c70211 \
                                sha256  d78e1c52a6f16ba14907cbe816a22a43f8aa8e1a9c4f664d3b7d5d982a9baab2 \
                                size    5147648

    depends_extract             port:bsdiff

    depends_build               bin:expect:expect \
                                port:timeout

    depends_skip_archcheck      bsdiff \
                                expect \
                                timeout

    set my_app_dir              "${applications_dir}/Mini vMac"
    set my_rom_dir              "~/Library/Preferences/Gryphel/mnvm_rom"
    set my_bootstrap_app        "Mini vMac Bootstrap.app"
    set my_rom_file             vMac.ROM

    # Options that are the same for every variation.
    configure.pre_args          -ef 1 \
                                -maintainer MacPorts \
                                -homepage https://www.macports.org \
                                -cl \
                                -eol unx \
                                -sony-sum 1 \
                                -sony-tag 1

    # Options set by variations.
    configure.args

    # Options set by variants.
    configure.post_args

    # The number of seconds to wait before killing the bootstrap process, in
    # case it gets stuck.
    set my_bootstrap_timeout    30

    configure.universal_archs   {*}${supported_archs}

    pre-extract {
        if {[my_real_rom_file] eq ""} {
            ui_msg "****************************************************************"
            ui_msg "To build Mini vMac, you will need a ROM file from a Macintosh"
            ui_msg "Plus or 512Ke. And to run it, you need a ROM file from the type"
            ui_msg "of Mac you want to emulate. ROM files are not included with this"
            ui_msg "package because they are copyrighted Apple software."
            ui_msg "To create a ROM file, download the CopyRoms program from"
            ui_msg "http://www.gryphel.com/c/minivmac/extras/copyroms/index.html"
            ui_msg "and transfer it to a real physical early Macintosh that you own."
            ui_msg "Run the CopyRoms program there, then transfer the ROM file back"
            ui_msg "to this Mac and put it in ${my_rom_dir}"
            ui_msg "(which can be an alias or symlink if desired) or"
            ui_msg "${my_app_dir}."
            ui_msg "****************************************************************"
            return -code error "${my_rom_file} not found"
        }
    }

    worksrcdir                  configure
    build.dir                   ${workpath}/build
    extract.mkdir               yes
    set my_mnvm_dat             "${worksrcpath}/${my_bootstrap_app}/Contents/mnvm_dat"

    post-extract {
        # Decompress the system disk container image.
        ui_debug "Decompressing ${my_system_disk_container_distfile}."
        set my_system_disk_container_decompressed "[file rootname ${my_system_disk_container}].dmg"
        system -W ${worksrcpath} "hdiutil convert '${distpath}/${my_system_disk_container_distfile}' -format UDRO -o '${my_system_disk_container_decompressed}'"

        # The images on the container image. Images we don't need are commented out for future reference.
        set my_images {
            {Disk Tools.image}    58368 eb1979132c843560ebab490faeb7520d9a94757ecef3121a21abace8d3ae63ff
        }
#           {Fonts.image}        427264 8b06f086a96b75bd23b16ae018bd334696239cb56e65bfa20166ea00d14cdef0
#           {Install 1.image}    796160 8c3ea898eeb88b795041108cd8a09bf4ebdf920d7d4763e4419df14713dbd952
#           {Install 2.image}   1165056 0fc558475df55f3aed217d2eceebfa29e4a465a795807cd627b258740a9ec55b
#           {Printing.image}    1533952 246cbf69ad1c2e588ee482fddec781135a67fbfe02734bb0f732eb055faa15fa
#           {Tidbits.image}     1902848 3e3600bed1b5c7c595bc176b5eaadcc8c1517032489efc548b9b781c0ee1f062

        # Extract the disk images from the system disk container image. `hdiutil` on OS X 10.8 Mountain Lion
        # does not mount this disk image correctly, so extract the files manually using `dd`.
        foreach {my_image_filename my_image_offset my_image_sha256} ${my_images} {
            ui_debug "Extracting ${my_image_filename} from ${my_system_disk_container_decompressed}."
            system -W ${worksrcpath} "dd if='${my_system_disk_container_decompressed}' bs=4 count=368661 skip=${my_image_offset} of='${my_image_filename}'"
            if {${my_image_sha256} ne [sha256 file ${worksrcpath}/${my_image_filename}]} {
                return -code error "extract failed"
            }
        }

        # Delete temporary files we no longer need.
        delete ${worksrcpath}/${my_system_disk_container_decompressed}

        # Make the data directory, where Mini vMac looks for the files it needs.
        file mkdir ${my_mnvm_dat}

        # Symlink the ROM file into the data directory.
        ln -s [my_real_rom_file] ${my_mnvm_dat}

        # Use the prettier icon on the bootstrap app.
        copy -force ${worksrcpath}/${my_icons}/icons//AppIcon.icns ${worksrcpath}/${my_bootstrap_app}/Contents/Resources/
    }

    post-patch {
        # See README-binary-patchfiles.md in the files directory for instructions
        # on recreating these binary patchfiles.

        # Modify the AutQuit7 disk to have an alias "app" pointing to the MnvM_b36
        # application and an 8192-byte TeachText file called "doc" (containing
        # "@START@", 8180 periods and spaces, and "@END@").
        system -W ${worksrcpath}/${my_autoquit} "${prefix}/bin/bspatch '${my_autoquit}.dsk' '${my_autoquit}.dsk.tmp' '${filespath}/patch-${my_autoquit}.dsk.bsdiff'"
        move -force "${worksrcpath}/${my_autoquit}/${my_autoquit}.dsk.tmp" "${worksrcpath}/${my_autoquit}/${my_autoquit}.dsk"

        # Modify the Disk Tools disk to have an alias of AutQuit7 in the Startup
        # Items folder.
        system -W ${worksrcpath} "${prefix}/bin/bspatch 'Disk Tools.image' 'Disk Tools.image.tmp' '${filespath}/patch-Disk Tools.image.bsdiff'"
        move -force "${worksrcpath}/Disk Tools.image.tmp" "${worksrcpath}/Disk Tools.image"
    }

    configure {
        set my_variation_dirs {}

        # Copy the disk images into the data directory with sequentially-numbered
        # names so Mini vMac will find them and automatically mount them.
        copy -force "${worksrcpath}/Disk Tools.image" "${my_mnvm_dat}/disk1.dsk"
        copy -force ${worksrcpath}/${my_src}/${my_src}.dsk "${my_mnvm_dat}/disk3.dsk"

        # Configure all variations.
        foreach my_arch [get_canonical_archs] {
            file mkdir ${build.dir}/${my_arch}
            set my_target [my_arch_to_target ${my_arch}]
            foreach {my_machine my_variation_options} ${my_variations} {
                set my_variation ${my_version}_${revision}-[strsed [string tolower ${my_machine}] {g/[^a-z0-9_-]//}]-${my_target}

                ui_debug "Configuring ${my_variation}"

                configure.args  -t ${my_target} \
                                -n ${my_variation} \
                                @ \
                                {*}${my_variation_options}

                set max_configure_args_length 8192
                set padded_configure_args [format "%-${max_configure_args_length}s" \
                    [concat ${configure.pre_args} ${configure.args} ${configure.post_args}]]
                if {[string length ${padded_configure_args}] > ${max_configure_args_length}} {
                    return -code error "configure args too long"
                }

                # Write the configure args into the "doc" file on the AutQuit7 disk image.
                copy -force ${worksrcpath}/${my_autoquit}/${my_autoquit}.dsk ${my_mnvm_dat}/disk2.dsk
                reinplace -locale C "s|@START@\[ .\]*@END@|${padded_configure_args}|" ${my_mnvm_dat}/disk2.dsk

                # Launch the bootstrap Mini vMac to run the configuration. When it's done
                # it should automatically quit, but if not, we time out after awhile.
                exec -ignorestderr ${prefix}/bin/timeout ${my_bootstrap_timeout} "${worksrcpath}/${my_bootstrap_app}/Contents/MacOS/minivmac" 2>/dev/null

                # Sandbox didn't used to allow access to the ptys Expect needs.
                # https://github.com/macports/macports-base/commit/8765c14223c2826c958cddd4e33c17801d63ddb4
                if {[vercmp [macports_version] 2.4.99] >= 0} {
                # Check if a configuration error occurred. This can happen if
                # invalid configuration options were specified.
                delete ${my_mnvm_dat}/disk3.dmg
                ln ${my_mnvm_dat}/disk3.dsk ${my_mnvm_dat}/disk3.dmg
                set mountpoint [my_attach_disk_image ${my_mnvm_dat}/disk3.dmg]
                if {[file exists ${mountpoint}/output/minivmac.err.txt]} {
                    copy ${mountpoint}/output/minivmac.err.txt ${worksrcpath}
                }
                my_detach_disk_image ${mountpoint}
                if {[file exists ${worksrcpath}/minivmac.err.txt]} {
                    set fp [open ${worksrcpath}/minivmac.err.txt r]
                    set error_text [read ${fp}]
                    close ${fp}
                    return -code error ${error_text}
                }
                }

                set my_src_tarball ${worksrcpath}/${my_variation}.tar
                if {[file isfile ${my_src_tarball}]} {
                    set my_variation_dir ${my_arch}/${my_machine}
                    lappend my_variation_dirs [strsed ${my_variation_dir} {g/ /\\\\ /}]

                    # Untar the configured source code.
                    system -W ${build.dir} "tar xf '${my_src_tarball}'"
                    move ${build.dir}/${my_variation} ${build.dir}/${my_variation_dir}

                    if {${subport} eq "${my_name}-bootstrap${my_suffix}"} {
                        # Change the "export" function so that exported files are written to the same
                        # directory as Mini vMac, instead of prompting for a location.
                        system -W ${build.dir}/${my_variation_dir} "patch -p0 < ${filespath}/patch-src-MYOSGLUE.c.diff"
                    }

                    # Use the right compiler.
                    reinplace "s|gcc|${configure.cc}|g" ${build.dir}/${my_variation_dir}/Makefile

                    # Remove references to SDKs -- the 10.4u SDK is not installed by default on 10.6
                    # and even if you install it manually it does not work here.
                    reinplace -E {s|-isysroot /Developer/SDKs/[^ ]+||g} ${build.dir}/${my_variation_dir}/Makefile
                }
            }
        }

        # If no variation directories were produced by configuration, something went
        # horribly wrong.
        if {${my_variation_dirs} eq ""} {
            return -code error "configuration failed!"
        }

        # Set up the global Makefile.
        xinstall ${filespath}/Makefile.in ${build.dir}/Makefile
        reinplace "s|@SUBDIRS@|[join ${my_variation_dirs}]|" ${build.dir}/Makefile
    }

    post-build {
        foreach my_arch [get_canonical_archs] {
            set my_target [my_arch_to_target ${my_arch}]
            foreach {my_machine unused} ${my_variations} {
                if {[variant_isset universal]} {
                    reinplace "s|${my_target}|umch|" ${build.dir}/${my_arch}/${my_machine}/minivmac.app/Contents/Info.plist
                }

                # Install the prettier icons.
                xinstall -m 0644 ${worksrcpath}/${my_icons}/icons/AppIcon.icns \
                    ${build.dir}/${my_arch}/${my_machine}/minivmac.app/Contents/Resources/ICONAPPO.icns
                xinstall -m 0644 ${worksrcpath}/${my_icons}/icons/DskIcon.icns \
                    ${build.dir}/${my_arch}/${my_machine}/minivmac.app/Contents/Resources/ICONDSKO.icns
                xinstall -m 0644 ${worksrcpath}/${my_icons}/icons/RomIcon.icns \
                    ${build.dir}/${my_arch}/${my_machine}/minivmac.app/Contents/Resources/ICONROMO.icns
            }
        }
    }

    destroot {
        foreach my_arch [get_canonical_archs] {
            if {[variant_isset universal]} {
                set my_dest ${workpath}/pre-dest/${my_arch}
            } else {
                set my_dest ${destroot}
            }
            xinstall -d ${my_dest}${my_app_dir}
            foreach {my_machine unused} ${my_variations} {
                copy ${build.dir}/${my_arch}/${my_machine}/minivmac.app \
                    "${my_dest}${my_app_dir}/Mini vMac ${my_machine}.app"
            }
        }
        if {[variant_isset universal]} {
            merge ${workpath}/pre-dest
        }
    }

    pre-activate {
        if {![catch {set installed [lindex [registry_active ${name}] 0]}]} {
            set installed_version [lindex ${installed} 1]
            set installed_revision [lindex ${installed} 2]
            set installed_epoch [lindex ${installed} 5]
            if {[vercmp ${installed_epoch} 4] < 0 || (
                [vercmp ${installed_epoch} 4] == 0 && (
                    [vercmp ${installed_version} 36.00alpha-20180506] < 0 || (
                    [vercmp ${installed_version} 36.00alpha-20180506] == 0 && [vercmp ${installed_revision} 1] < 0
                    )
                )
                )} {
                registry_deactivate_composite ${name} "" [list ports_nodepcheck 1]
            }
        }
    }
}

set default_screen_size         512x342

subport ${my_name}-128k${my_suffix} {
    my_variations               {128K}          {-m 128K}
}

subport ${my_name}-512k${my_suffix} {
    my_variations               {512K}          {-m 128K -mem 512K}
}

subport ${my_name}-512ke${my_suffix} {
    my_variations               {512Ke}         {-m 512Ke}
}

subport ${my_name}-plus${my_suffix} {
    my_variations               {Plus}          {-m Plus}
    default_variants            +icon_master
}

subport ${my_name}-se${my_suffix} {
    my_variations               {SE}            {-m SE}
}

subport ${my_name}-sefdhd${my_suffix} {
    my_variations               {SE FDHD}       {-m SEFDHD}
}

subport ${my_name}-classic${my_suffix} {
    my_variations               {Classic}       {-m Classic}
}

subport ${my_name}-ii${my_suffix} {
    my_variations               {II}            {-m II}
    set default_screen_size     640x480
}

# To build the bootstrap application, use:
#   sudo port destroot minivmac-devel bootstrap=yes subport=minivmac-bootstrap-devel
# The subport is hidden because it is useful only to the port maintainer.
if {[tbool bootstrap]} {
    subport ${my_name}-bootstrap${my_suffix} {
        my_variations           {Bootstrap}     {-m Plus -as 0 -bg 1 -mf 1 -sound 0 -speed a -var-fullscreen 0}

        description             Mini vMac Bootstrap

        long_description        A copy of Mini vMac specially configured to be \
                                used to build other copies of Mini vMac.

        depends_build-append    port:p7zip

        depends_skip_archcheck-append \
                                p7zip

        if {${os.major} < 11} {
            default_variants    +universal
        }

        set output_archive      ${workpath}/${my_name}-bootstrap-${version}_${revision}.zip

        post-destroot {
            exec 7za a ${output_archive} ${destroot}${my_app_dir}/${my_bootstrap_app}
            ui_msg "The distribution zip file has been created:"
            ui_msg
            ui_msg "${output_archive}"

            if {![variant_isset universal] || "ppc" ni ${configure.universal_archs}} {
                ui_msg
                ui_warn "DON'T DISTRIBUTE THIS FILE! It doesn't contain all the"
                ui_warn "necessary architectures. To build a distributable"
                ui_warn "bootstrap app, use the universal variant and build on"
                ui_warn "Mac OS X Leopard or Snow Leopard."
            }
        }
    }
}

if {${subport} ni [list "${my_name}${my_suffix}" "${my_name}-bootstrap${my_suffix}"]} {
    description                 a Macintosh [lindex ${my_variations} 0] emulator

    long_description-append     This subport emulates a Macintosh \
                                [lindex ${my_variations} 0].

    if {[lindex ${my_variations} 0] eq "Plus"} {
        long_description-append This is the best-tested variation.
    }

    long_description-append     There are other subports that emulate other Macintosh \
                                models.

    variant icon_master description {Take ownership of disk image files and ROM image files; at most one copy of Mini vMac should do this} {
        configure.post_args-append \
                                -im 1
    }

    set screen_sizes {512x342 512x384}
    if {${subport} ne "${my_name}-128k${my_suffix}"} {
        lappend screen_sizes 640x480 800x600 1024x768
    }
    foreach screen_size ${screen_sizes} {
        lappend screen_size_variants screen_${screen_size}
    }
    set set_default_screen_size_variant yes
    foreach screen_size ${screen_sizes} {
        set screen_hres [lindex [split ${screen_size} {x}] 0]
        set screen_vres [lindex [split ${screen_size} {x}] 1]
        set screen_size_variant screen_${screen_size}
        variant ${screen_size_variant} conflicts {*}[lsearch -all -inline -not -exact ${screen_size_variants} ${screen_size_variant}] description "Screen size ${screen_size}" "
            configure.post_args-append  -hres ${screen_hres} -vres ${screen_vres}
        "
        if [variant_isset ${screen_size_variant}] {
            set set_default_screen_size_variant no
        }
    }
    if ${set_default_screen_size_variant} {
        default_variants +screen_${default_screen_size}
    }
}

# Returns the full path to the ROM file, wherever the user has it,
# or the empty string if the user doesn't have it.
proc my_real_rom_file {} {
    global my_app_dir my_rom_dir my_rom_file
    if {[file exists ${my_app_dir}/${my_rom_file}]} {
        return ${my_app_dir}/${my_rom_file}
    }
    set my_real_rom_dir [my_read_alias ${my_rom_dir}]
    if {[file exists ${my_real_rom_dir}/${my_rom_file}]} {
        return ${my_real_rom_dir}/${my_rom_file}
    }
    return ""
}

# Resolves a Mac OS X alias.
proc my_read_alias {file} {
    global filespath
    return [exec osascript ${filespath}/readalias.applescript [file normalize ${file}]]
}

# Converts normal arch names into Mini vMac target names.
proc my_arch_to_target {arch} {
    switch ${arch} {
        i386 {
            return imch
        }
        ppc {
            return mach
        }
        default {
            return -code error "unsupported architecture ${arch}"
        }
    }
}

# Mounts a disk image, using an Expect script that answers "yes" when some
# versions of hdiutil ask if we want to mount the image even though it may be
# damaged.
proc my_attach_disk_image {disk_image} {
    global my_name filespath
    set mountpoint [mkdtemp "/tmp/${my_name}.XXXXXXXX"]
    system "expect ${filespath}/attach.exp '${disk_image}' '${mountpoint}'"
    return ${mountpoint}
}

# Unmounts a disk image.
proc my_detach_disk_image {mountpoint} {
    system "hdiutil detach ${mountpoint} -force"
    delete ${mountpoint}
}
